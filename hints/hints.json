{
  "issue_1": {
    "titulo": "Arregla los print statements",
    "hint_1": {
      "text": "🤔 En Python 3, print es una función. ¿Qué necesitan las funciones para ser llamadas?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Las funciones necesitan paréntesis. También, los strings necesitan comillas. Ejemplo: print('Hola')",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Estructura correcta:\nprint('Texto aquí')\nprint('Tu granja tiene', variable, 'cultivos')\nprint(f'Día: {dia}')",
      "unlock_after_minutes": 20
    }
  },
  "issue_2": {
    "titulo": "Define tipos de datos correctos",
    "hint_1": {
      "text": "🤔 ¿Cuál es la diferencia entre '3' y 3? ¿Entre 'True' y True?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Con comillas es string ('3'), sin comillas es número (3). Los booleanos son True/False sin comillas.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Tipos correctos:\ntiempo_crecimiento = 3  # int\nprecio = 15.50  # float\nnecesita_agua = True  # bool",
      "unlock_after_minutes": 20
    }
  },
  "issue_3": {
    "titulo": "Conversión de tipos",
    "hint_1": {
      "text": "🤔 No puedes multiplicar strings. ¿Cómo conviertes '10' a número?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Usa int() para enteros, float() para decimales. Ejemplo: int('5') devuelve 5",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Para calcular:\nprecio_num = float(precio_texto)\ncantidad_num = int(cantidad_texto)\ntotal = precio_num * cantidad_num",
      "unlock_after_minutes": 20
    }
  },
  "issue_4": {
    "titulo": "Variables de la granja",
    "hint_1": {
      "text": "🤔 ¿Qué información necesita trackear una granja? Piensa en un juego de farming.",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Una granja necesita: tamaño, agua, energía, día actual. Se definen en __init__ con self.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 En __init__ añade:\nself.tamaño = 10\nself.nivel_agua = 100\nself.energia = 100\nself.dia = 1",
      "unlock_after_minutes": 20
    }
  },
  "issue_5": {
    "titulo": "Input del usuario",
    "hint_1": {
      "text": "🤔 ¿Cómo puede el programa recibir información del usuario?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 La función input() muestra un mensaje y espera que el usuario escriba algo.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Ejemplo:\nnombre = input('¿Cómo se llama tu granja? ')\nopcion = input('Elige una opción: ')",
      "unlock_after_minutes": 20
    }
  },
  "issue_6": {
    "titulo": "Formateo de strings",
    "hint_1": {
      "text": "🤔 ¿Cómo puedes incluir variables dentro de strings de forma dinámica?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Los f-strings son la forma moderna: f'Hola {nombre}'. También puedes usar .format() o %.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Ejemplo completo:\nf'🌾 GRANJA: {granja.nombre}'\nf'💧 AGUA: {granja.nivel_agua}/100'\nf'⚡ ENERGÍA: {granja.energia}%'",
      "unlock_after_minutes": 20
    }
  },
  "issue_7": {
    "titulo": "Operaciones aritméticas básicas",
    "hint_1": {
      "text": "🤔 ¿Cuáles son las operaciones matemáticas básicas? +, -, *, /, %, //...",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Para porcentajes: (parte/total) * 100. Para actualizar: variable += valor o variable -= valor.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Ejemplos:\ncosto = cantidad * precio_unitario\neficiencia = (cosechados / plantados) * 100\ngranja.agua -= agua_usada",
      "unlock_after_minutes": 20
    }
  },
  "issue_8": {
    "titulo": "Comentarios y documentación",
    "hint_1": {
      "text": "🤔 ¿Cómo puedes explicar tu código para que otros (y tú mismo) lo entiendan?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Usa # para comentarios de línea y \"\"\" \"\"\" para docstrings de funciones. Explica QUÉ hace, no cómo.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Estructura de docstring:\ndef funcion(param):\n    \"\"\"\n    Descripción de qué hace.\n    Args: param (tipo): descripción\n    Returns: tipo: descripción\n    \"\"\"",
      "unlock_after_minutes": 20
    }
  },
  "issue_9": {
    "titulo": "Sistema de riego con condicionales",
    "hint_1": {
      "text": "🤔 Antes de regar, ¿qué dos cosas necesitas verificar? Piensa en la vida real.",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Necesitas: 1) Tener agua disponible (nivel_agua > 0) Y 2) El cultivo necesita agua. Usa 'and' para verificar ambas.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Estructura:\nif self.nivel_agua > 0:\n    for cultivo in self.cultivos:\n        if cultivo.necesita_agua:\n            cultivo.regar()\n            self.nivel_agua -= 1",
      "unlock_after_minutes": 20
    }
  },
  "issue_10": {
    "titulo": "Lista de cultivos",
    "hint_1": {
      "text": "🤔 ¿Cómo almacenas múltiples elementos del mismo tipo en Python?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Las listas se crean con corchetes []. Puedes iniciar vacía [] o con elementos ['tomate', 'maíz']",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Cambia:\nself.cultivos = None\nPor:\nself.cultivos = []\n\nLuego usa append() para añadir.",
      "unlock_after_minutes": 20
    }
  },
  "issue_11": {
    "titulo": "Métodos de lista",
    "hint_1": {
      "text": "🤔 ¿Qué operaciones puedes hacer con una lista? Añadir, quitar, ordenar...",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Métodos útiles: append(item), remove(item), sort(), len(lista), item in lista",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Ejemplos:\nself.cultivos.append(nuevo_cultivo)\nself.cultivos.remove(cultivo)\nself.cultivos.sort(key=lambda x: x.precio)",
      "unlock_after_minutes": 20
    }
  },
  "issue_16": {
    "titulo": "Bucle de cosecha",
    "hint_1": {
      "text": "🤔 ¿Cómo revisas cada elemento de una lista uno por uno?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Usa 'for cultivo in self.cultivos:' para iterar sobre cada cultivo.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Estructura:\ncosechados = 0\nfor cultivo in self.granja.cultivos:\n    if cultivo.puede_cosechar():\n        # cosechar\n        cosechados += 1\nreturn cosechados",
      "unlock_after_minutes": 20
    }
  },
  "issue_12": {
    "titulo": "Validación de entrada con if/else",
    "hint_1": {
      "text": "🤔 ¿Cómo verificas si un número es válido antes de usarlo? ¿Y si la entrada no es un número?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Usa try/except para números inválidos e if para verificar rangos. Ejemplo: if cantidad <= 0:",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Estructura de validación:\ntry:\n    num = int(input('Número: '))\n    if num > 0:\n        return num\n    else:\n        print('Debe ser positivo')\nexcept ValueError:\n    print('Debe ser un número')",
      "unlock_after_minutes": 20
    }
  },
  "issue_13": {
    "titulo": "Sistema de temporadas",
    "hint_1": {
      "text": "🤔 ¿Cómo puedes verificar si un cultivo es apropiado para una temporada específica?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Cada cultivo puede tener una lista de temporadas válidas. Usa 'in' para verificar: if temporada in cultivo.temporadas",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Implementación:\nif cultivo.temporadas == 'todo-temporada':\n    return True\nelif self.temporada in cultivo.temporadas:\n    return True\nelse:\n    return False",
      "unlock_after_minutes": 20
    }
  },
  "issue_14": {
    "titulo": "Comparación de cultivos",
    "hint_1": {
      "text": "🤔 ¿Cómo comparas dos números? ¿Cómo calculas rentabilidad precio/tiempo?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Usa operadores >, <, >= para comparar. Rentabilidad = precio / tiempo_crecimiento",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Función de comparación:\ndef comparar_por_rentabilidad(cultivo1, cultivo2):\n    rent1 = cultivo1.precio / cultivo1.tiempo_crecimiento\n    rent2 = cultivo2.precio / cultivo2.tiempo_crecimiento\n    return cultivo1 if rent1 > rent2 else cultivo2",
      "unlock_after_minutes": 20
    }
  },
  "issue_15": {
    "titulo": "Estado del juego con booleanos",
    "hint_1": {
      "text": "🤔 ¿Cómo representas estados de verdadero/falso? ¿Cómo combinas múltiples condiciones?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Usa variables booleanas: es_dia = True. Combina con 'and': if es_dia and not hay_tormenta:",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Verificación de estado:\ndef puede_plantar(self):\n    if not self.es_dia:\n        return False, 'Solo puedes plantar de día'\n    if self.hay_tormenta:\n        return False, 'No puedes plantar durante tormenta'\n    return True, 'OK'",
      "unlock_after_minutes": 20
    }
  },
  "issue_17": {
    "titulo": "Game loop con while",
    "hint_1": {
      "text": "🤔 ¿Cómo haces que algo se repita hasta que el usuario decida parar?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Un bucle while con una condición. Cambia la condición cuando el usuario elija salir.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Estructura:\njugando = True\nwhile jugando:\n    mostrar_menu()\n    opcion = input('Elige: ')\n    if opcion == '0':\n        jugando = False",
      "unlock_after_minutes": 20
    }
  },
  "issue_18": {
    "titulo": "Función plantar_cultivo",
    "hint_1": {
      "text": "🤔 Una función necesita recibir parámetros y hacer algo con ellos. ¿Qué necesitas para plantar?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 La función debe recibir tipo_cultivo y posicion. Verifica recursos antes de plantar.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Estructura:\ndef plantar_cultivo(self, tipo_cultivo, posicion):\n    if self.energia < 10:\n        return False\n    # crear cultivo\n    self.cultivos.append(cultivo)\n    return True",
      "unlock_after_minutes": 20
    }
  },
  "issue_19": {
    "titulo": "Función pasar_dia",
    "hint_1": {
      "text": "🤔 ¿Qué cosas pasan automáticamente cada día en una granja? Piensa en un ciclo diario.",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Incrementa self.dia, resetea energia, actualiza cada cultivo con un bucle for.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Pasos:\nself.dia += 1\nself.energia = 100\nfor cultivo in self.cultivos:\n    cultivo.crecer_un_dia()\n# crear y retornar resumen",
      "unlock_after_minutes": 20
    }
  },
  "issue_20": {
    "titulo": "Bucles anidados para regar zona",
    "hint_1": {
      "text": "🤔 Para regar un área rectangular, necesitas ir fila por fila y columna por columna. ¿Cómo?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Un bucle for dentro de otro: el exterior para filas (y), el interior para columnas (x).",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Estructura:\nfor y in range(y_inicio, y_fin + 1):\n    for x in range(x_inicio, x_fin + 1):\n        cultivo = self.get_cultivo_en(x, y)\n        if cultivo: cultivo.regar()",
      "unlock_after_minutes": 20
    }
  },
  "issue_21": {
    "titulo": "Función con parámetros y retorno",
    "hint_1": {
      "text": "🤔 ¿Cómo calculas rentabilidad? (ganancia - costo) / tiempo. ¿Qué parámetros necesitas?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 La función necesita precio, tiempo_crecimiento, costo_mantenimiento=1.0. Retorna un diccionario.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Estructura:\ndef calcular_rentabilidad(precio, tiempo, costo=1.0):\n    ganancia_neta = precio - (costo * tiempo)\n    return {'ganancia_diaria': ganancia_neta/tiempo, 'clasificacion': '...'} ",
      "unlock_after_minutes": 20
    }
  },
  "issue_22": {
    "titulo": "Range y enumerate en bucles",
    "hint_1": {
      "text": "🤔 range(start, stop, step) genera números. enumerate(lista) da índice y valor. ¿Cuándo usar cada uno?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Usa range() para secuencias numéricas y patrones. Usa enumerate() cuando necesitas la posición en la lista.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Ejemplos:\n# Patrón: for i in range(0, 20, 3)\n# Con índices: for i, cultivo in enumerate(cultivos)\n# Intervalos: if i % intervalo == 0",
      "unlock_after_minutes": 20
    }
  },
  "issue_23": {
    "titulo": "Diccionario de cultivos",
    "hint_1": {
      "text": "🤔 ¿Cómo almacenas información estructurada sobre múltiples cultivos? Piensa en una base de datos simple.",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Los diccionarios pueden contener otros diccionarios. Estructura: CULTIVOS_DB = {'tomate': {'precio': 25, 'tiempo': 4}}",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Para cada cultivo incluye: precio, tiempo_crecimiento, temporadas, agua_requerida, experiencia, categoria, descripcion, nivel_requerido",
      "unlock_after_minutes": 20
    }
  },
  "issue_24": {
    "titulo": "Algoritmo de mejor cultivo",
    "hint_1": {
      "text": "🤔 ¿Qué hace a un cultivo 'mejor'? Rentabilidad, rapidez, experiencia... ¿Cómo calculas cada criterio?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Rentabilidad = precio/tiempo. Para criterio equilibrado, combina varios factores con pesos diferentes.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Función estructura: def encontrar_mejor_cultivo(criterio, temporada):\n# Filtrar por temporada\n# Calcular score según criterio\n# Retornar el de mayor score",
      "unlock_after_minutes": 20
    }
  },
  "issue_25": {
    "titulo": "Sistema de batalla de cultivos",
    "hint_1": {
      "text": "🤔 ¿Qué estadísticas necesita un cultivo para 'batallar'? Ataque, defensa, salud, velocidad...",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Batalla por turnos: orden por velocidad, daño = max(1, ataque - defensa), habilidades especiales por tipo.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Clase BatallaCultivos necesita: inicializar cultivos, bucle de batalla, aplicar daño, verificar ganador, log de acciones.",
      "unlock_after_minutes": 20
    }
  },
  "issue_26": {
    "titulo": "Comprensión de listas",
    "hint_1": {
      "text": "🤔 [expresion for item in lista if condicion] - ¿Cómo puedes filtrar y transformar listas en una sola línea?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Para cultivos listos: [c for c in cultivos if c.esta_listo()]. Para nombres: [c.nombre for c in cultivos]",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Anidadas: [[c1 for c1 in cultivos if c1.categoria == c2.categoria] for c2 in cultivos]. Con dict: {c.nombre: c.precio for c in cultivos}",
      "unlock_after_minutes": 20
    }
  },
  "issue_27": {
    "titulo": "Diccionarios anidados",
    "hint_1": {
      "text": "🤔 ¿Cómo organizas información jerárquica? configuracion -> recursos -> agua -> actual = 100",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Acceso profundo: datos['regiones']['norte']['clima']. Para navegar dinámicamente, divide la ruta por puntos.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Función obtener_valor_anidado: divide ruta, usa bucle for para navegar nivel por nivel, maneja KeyError con default.",
      "unlock_after_minutes": 20
    }
  },
  "issue_28": {
    "titulo": "Algoritmo de búsqueda",
    "hint_1": {
      "text": "🤔 Búsqueda lineal O(n) vs binaria O(log n). ¿Cuándo usar cada una? ¿Qué requisitos tiene búsqueda binaria?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Búsqueda binaria requiere lista ordenada. BFS usa queue para vecinos, DFS usa stack. Pathfinding considera obstáculos.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Binaria: izq=0, der=len-1, medio=(izq+der)//2, compara y ajusta límites. BFS: queue=[inicio], while queue: pos=pop(0)",
      "unlock_after_minutes": 20
    }
  },
  "issue_29": {
    "titulo": "Ordenamiento personalizado",
    "hint_1": {
      "text": "🤔 Bubble O(n²), Quick O(n log n), Merge O(n log n). ¿Cuál es más estable? ¿Cuál usa menos memoria?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Merge sort es estable y divide en mitades. Quick sort pivote y partición. Para múltiples criterios: sort(key=lambda x: (criterio1, criterio2))",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Merge: if len<=1 return, divide en mitades, merge recursivo. Quick: pivote, particionar, recursivo en sublistas.",
      "unlock_after_minutes": 20
    }
  },
  "issue_30": {
    "titulo": "Cálculo de estadísticas",
    "hint_1": {
      "text": "🤔 Media = sum/n, mediana = valor medio, desviación = sqrt(sum((x-media)²)/n). ¿Cómo calculas correlación?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 ROI = (ganancia-inversión)/inversión*100. Correlación Pearson: cov(x,y)/(std(x)*std(y)). Tendencia = pendiente de regresión lineal.",
      "unlock_after_minutes": 10
    },
    "hint_3": {
      "text": "📝 Para tendencia: suma de (x*y) vs suma(x)*suma(y). Para insights: compara valores con promedios, detecta anomalías, sugiere acciones.",
      "unlock_after_minutes": 20
    }
  },
  "issue_31": {
    "titulo": "Parser de datos CSV",
    "hint_1": {
      "text": "🤔 ¿Cómo lees archivos CSV en Python? El módulo 'csv' tiene funciones útiles como csv.reader() y csv.DictReader().",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 csv.DictReader() convierte cada fila en diccionario usando encabezados. Para fechas usa datetime.strptime(). Maneja errores con try/except.",
      "unlock_after_minutes": 15
    },
    "hint_3": {
      "text": "📝 Estructura básica:\nwith open(archivo, 'r') as f:\n    reader = csv.DictReader(f)\n    for row in reader:\n        fecha = datetime.strptime(row['fecha'], '%Y-%m-%d')\n        precio = float(row['precio'])",
      "unlock_after_minutes": 30
    }
  },
  "issue_32": {
    "titulo": "Clases y POO - Crear clase Farmer",
    "hint_1": {
      "text": "🤔 Una clase es como un molde para crear objetos. ¿Qué atributos necesita un granjero? ¿Qué métodos puede hacer?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Usa __init__ para constructor, @property para getters/setters, super() para herencia. Los atributos privados empiezan con _.",
      "unlock_after_minutes": 15
    },
    "hint_3": {
      "text": "📝 Estructura de clase:\nclass Farmer:\n    def __init__(self, name, experience=0):\n        self._name = name\n        self._experience = experience\n    \n    @property\n    def level(self):\n        return self._experience // 100",
      "unlock_after_minutes": 30
    }
  },
  "issue_33": {
    "titulo": "Manejo de excepciones",
    "hint_1": {
      "text": "🤔 ¿Qué puede salir mal en una granja? Falta de recursos, mal clima, errores de archivo... Cada error necesita manejo específico.",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Crea excepciones personalizadas heredando de Exception. Usa try/except/finally. El bloque finally siempre se ejecuta.",
      "unlock_after_minutes": 15
    },
    "hint_3": {
      "text": "📝 Excepción personalizada:\nclass InsufficientResourcesError(Exception):\n    def __init__(self, resource, needed, available):\n        super().__init__(f'Falta {resource}: necesitas {needed}, tienes {available}')",
      "unlock_after_minutes": 30
    }
  },
  "issue_34": {
    "titulo": "Decoradores y funciones avanzadas",
    "hint_1": {
      "text": "🤔 Los decoradores 'envuelven' funciones para añadir funcionalidad. ¿Cómo medirías tiempo o validarías permisos automáticamente?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Un decorador básico: def mi_decorador(func): def wrapper(*args, **kwargs): return func(*args, **kwargs); return wrapper. Usa @functools.wraps(func).",
      "unlock_after_minutes": 15
    },
    "hint_3": {
      "text": "📝 Decorador con parámetros:\ndef timing(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        print(f'{func.__name__}: {time.time() - start:.2f}s')\n        return result\n    return wrapper",
      "unlock_after_minutes": 30
    }
  },
  "issue_35": {
    "titulo": "Sistema de persistencia con JSON",
    "hint_1": {
      "text": "🤔 JSON puede almacenar diccionarios, listas, strings, números, booleanos. ¿Cómo guardas objetos complejos como fechas o clases personalizadas?",
      "unlock_after_minutes": 0
    },
    "hint_2": {
      "text": "💡 Usa json.dumps() para serializar, json.loads() para deserializar. Para objetos complejos, crea un JSONEncoder personalizado.",
      "unlock_after_minutes": 15
    },
    "hint_3": {
      "text": "📝 Encoder personalizado:\nclass FarmJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        if hasattr(obj, '__dict__'):\n            return obj.__dict__\n        return super().default(obj)",
      "unlock_after_minutes": 30
    }
  }
}